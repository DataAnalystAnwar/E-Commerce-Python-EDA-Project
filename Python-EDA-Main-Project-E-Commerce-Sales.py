# -*- coding: utf-8 -*-
"""EDA Main project 10 E-Commerce Sales Dataset Completed.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EOcebc8A1CeIf4c751iuTLyHoYUlu22W

# important steps:-
#1 : - Define the Question .
#2 : - Collect the data.
#3 : - Clean the data .
#4 : - Analyze the data .
#5 : - Visualize and Finding.

#Import all important Libraries.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('dark_background')
import warnings
warnings.filterwarnings('ignore')
from datetime import datetime
sns.set(color_codes=True)

"""#E-Commerce Sales Dataset
#Analyzing and Maximizing Online Business Performance

# Dataset :- https://www.kaggle.com/datasets/thedevastator/unlock-profits-with-e-commerce-sales-data

# Import Data in our environment .
"""

df=pd.read_csv("/content/drive/MyDrive/EDA Main Project files/Amazon Sale Report.csv",encoding='unicode_escape')
df.head()

"""# Check shape."""

df.shape

"""# Check info."""

df.info()

"""# Check duplicate values."""

df.duplicated().sum()

"""# Drop Duplicate values."""

df.drop_duplicates(inplace=True)

df.duplicated().sum()

"""# Check Statiscal."""

df.describe()

"""# Check null values."""

df.isnull().sum()

percent_missing_values = df.isnull().sum() * 100 / len(df)
percent_missing_values

percent_missing_values.plot(kind='barh')
plt.show()

"""# Drop columns which has more 20 % null values."""

df.drop(['promotion-ids','fulfilled-by'], axis=1,inplace=True)

pm= df.isnull().sum() * 100 / len(df)
pm

"""# Fill the null values with mean, median and mode respectively."""

for i in df.columns:
  if df[i].dtypes=='object':
    df[i]=df[i].fillna(df[i].mode()[0])
  else:
    df[i]=df[i]=df[i].fillna(df[i].median())

df.isnull().sum()

"""# Drop irrelevant columns."""

df.head(2)

df.columns

df['B2B'].unique()

df.drop(['Order ID'],inplace=True,axis=1)

df.columns

"""# Change Datatype of a Date columns."""

df['Date']=pd.to_datetime(df['Date'])

df.head(2)

df['Date'].dtype

df.shape

df.columns

df.describe()

df.describe(include='object')

df.head(2)

"""# Analyize the Data and finding.

# Which month has highest sales ?
"""

df['Date']

d=df['Date'].dt.month.value_counts()
d

d.plot(kind="pie",autopct="%1.2f%%")
plt.show()

df.columns

"""# Find the Status count by their values ?"""

df['Status']

s=df['Status'].value_counts()
s

plt.figure(figsize=(19,15))
s.plot(kind="pie",autopct="%1.2f%%")
plt.show()

df.columns

"""# Find out the number the order fulfiment by amazon and merchent ?"""

df['Fulfilment']

f=df['Fulfilment'].value_counts()
f

f.plot(kind="pie",autopct="%1.2f%%")
plt.show()

plt.figure(figsize=(6,6))
gr=sns.countplot(x='Fulfilment',data=df)
gr.bar_label(gr.containers[0])
plt.show()

df.columns

"""# Which sales channel has the highest number ?"""

sc=df['Sales Channel '].value_counts()
sc

plt.figure(figsize=(6,6))
gr=sns.countplot(x='Sales Channel ',data=df)
gr.bar_label(gr.containers[0])
plt.show()

sc.plot(kind="pie",autopct="%1.2f%%")
plt.show()

df.columns

"""# Find out number the ship service level ?"""

ssl=df['ship-service-level'].value_counts()
ssl

ssl.plot(kind="pie",autopct="%1.2f%%")
plt.show()

plt.figure(figsize=(6,6))
gr=sns.countplot(x='ship-service-level',data=df)
gr.bar_label(gr.containers[0])
plt.show()

df.columns

"""# Which category has highest the sales ?"""

c=df['Category'].value_counts()
c

plt.figure(figsize=(12,10))
gr=sns.countplot(x='Category',data=df)
gr.bar_label(gr.containers[0])
plt.show()

plt.figure(figsize=(12,9))
c.plot(kind="pie",autopct="%1.2f%%")
plt.show()

df.columns

"""# Which size has the highest sales figure ?"""

si=df['Size'].value_counts()
si

plt.figure(figsize=(12,10))
gr=sns.countplot(x='Size',data=df)
gr.bar_label(gr.containers[0])
plt.show()

plt.figure(figsize=(12,9))
si.plot(kind="pie",autopct="%1.2f%%")
plt.show()

df.columns

"""# Check the Courier Status ?"""

cs=df['Courier Status'].value_counts()
cs

plt.figure(figsize=(12,9))
cs.plot(kind="pie",autopct="%1.2f%%")
plt.show()

plt.figure(figsize=(12,10))
gr=sns.countplot(x='Courier Status',data=df)
gr.bar_label(gr.containers[0])
plt.show()

df.columns

"""# Find out the top 5 city which has maximum sales ?"""

sci=df['ship-city'].value_counts()[0:5]
sci

plt.figure(figsize=(12,9))
sci.plot(kind="pie",autopct="%1.2f%%")
plt.show()

df.columns

"""# Find out the top 5 State which has maximum sales ?"""

ss=df['ship-state'].value_counts()[0:5]
ss

plt.figure(figsize=(12,9))
ss.plot(kind="pie",autopct="%1.2f%%")
plt.show()

df.columns

"""# Check the B2B status ?"""

b=df['B2B'].value_counts()
b

plt.figure(figsize=(12,9))
b.plot(kind="pie",autopct="%1.2f%%")
plt.show()

"""# Find out size count according to the qty ?"""

df.groupby(['Size'],as_index=False)['Qty'].sum().sort_values(by='Qty',ascending=False)

sq=df.groupby(['Size'],as_index=False)['Qty'].sum().sort_values(by='Qty',ascending=False)
sns.barplot(x='Size',y='Qty',data=sq)

df.head(2)

"""# Find status = Shipped , category= kurta, Ship-state= maharashtra, ship-city =mumbai and size = XL ?"""

df[(df['Status']=='Shipped')&(df['Category']=='kurta')&(df['ship-state']=='MAHARASHTRA')&(df['ship-city']=='MUMBAI')&(df['Size']=='XL')]

df.head(2)

"""# Check the category is set and amount is greater than 400 ?"""

df[(df['Category']=='Set')&(df['Amount']>=400)]

